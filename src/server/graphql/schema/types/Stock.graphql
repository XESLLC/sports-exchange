type TournamentTeamStock {
  teamName: String!
  teamId: ID!
  tournamentTeamId: ID!
  ipoPrice: Float!
  quantity: Int!
  trades: [Transaction]
  seed: Int
  region: String
  stockIds: [ID!]!
}

type Stock {
  id: ID
  tournamentTeamId: ID!
  price: Float
  originalIpoEntryId: ID!
  offerExpiresAt: String
  tradableTeams: [TradableTeam]
}

type TradableTeam {
  tournamentTeamId: ID!
  teamName: String!
  quantity: Int!
  price: Float!
}

input SellStockInput {
  email: String!
  entryId: ID!
  tournamentTeamId: ID!
  quantity: Int!
}

input TradeStocksInput {
  email: String!
  entryId: ID!
  stockIdToTradeFor: ID!
  quantity: Int!
  tradableTeams: [TradableTeamInput!]!
}

input StockPriceInput {
  email: String!
  entryId: ID!
  tournamentTeamId: ID!
  quantity: Int!
  newPrice: Float
  offerExpiresAt: Float
  tradableTeams: [TradableTeamInput]
}

input TradableTeamInput {
  tournamentTeamId: ID!
  teamName: String!
  quantity: Int!
  price: Float!
}

type OfferedStocks {
  myStockOffers: [EntryStockData]
  leagueStockOffers: [EntryStockData]
}

type EntryStockData {
  stockId: ID!
  tournamentTeamId: ID!
  teamName: String!
  numStocksForSale: Int!
  currentAskPrice: Float
  offerExpiresAt: String
  tradableTeams: [TradableTeam]
}

type Transaction {
  id: ID!
  entry: Entry
  teamName: String!
  tournamentTeamId: ID!
  quantity: Int!
  cost: Float!
  stockId: ID!
  createdAt: String!
}

type RemoveExpiredBidsAndAsksResponse {
  response: String
}

type Query {
  getOfferedStocksForTournament(tournamentId: ID!, entryId: ID!): OfferedStocks!
  stocksByEntryId(entryId: ID!): [TournamentTeamStock]
  getOriginallyPurchasedStocks(entryId: ID!): [Stock]
}

type Mutation {
  sellEntryStocks(input: SellStockInput!): [TournamentTeamStock]!
  setStockAskPrice(input: StockPriceInput!): [TournamentTeamStock]!
  setTournamentTeamStockPriceToNull(tournamentTeamId: ID!, entryId: ID!): Entry
  removeExpiredBidsAndAsks(tournamentId: ID!): RemoveExpiredBidsAndAsksResponse
  tradeStocks(input: TradeStocksInput!): [Transaction]!
  deleteStocks(entryId: ID!, stockIds: [ID!]!): Entry
  manualTrade(entryId: ID!, stockIds: [ID!]!, receivingEntryId: ID!, pricePerStock: Float!): Entry
}
