type Entry {
  id: ID!
  tournamentId: ID!
  tournament: Tournament
  name: String!
  ipoCashSpent: Float!
  secondaryMarketCashSpent: Float!
}

input EntryInput {
  name: String!
  userEmails: [String!]
  tournamentId: ID!
}

input IPOPurchaseInput {
  tournamentTeamId: ID!
  quantity: Int!
  userEmail: String!
  entryId: ID!
}

input NewEntryBidInput {
  entryId: ID!
  tournamentTeamId: ID!
  price: Float!
  quantity: Int!
  expiresAt: Float
}

type OfferedBids {
  myBids: [EntryBid]
  leagueBids: [EntryBid]
}

type EntryBid {
  id: ID!
  entryId: ID!
  tournamentTeamId: ID!
  teamName: String!
  price: Float!
  quantity: Int!
  trades: [Transaction]
  expiresAt: String
}

type PortfolioSummary {
  ownerName: String!,
  entryName: String!,
  totalInitalInvestment: Float!, # initial ipo investment
  totalInitialStocksOwned: Float!,
  totalCurrentStocksOwned: Float!, #total owned and eliminated
  stocksRemaining: Float!, #total of whats no eliminated
  percentStocksRemaining: Float!, #totalInitial/stocksRemaining,
  totalCurrentTeamsOwned: Float!, #number of specific teams owned and may have been eliminated
  totalCurrentTeamsRemaining: Float!, #number of teams that are left in tourn
  moneyWonToDate: Float!,
  percentMoneyWonInvested: Float!, #moneyWonToDate/totalInvestment,
  originalMoneyRemaining: Float!, #money left from ipo
  profitLoss: Float!, #money won - ipo - secondary market cash
  percentMoneyRemaining: Float!, #originalMoneyr
}


type Query {
  entry(id: ID!): Entry
  entriesByTournamentId(tournamentId: ID!): [Entry]
  getBidsForEntry(entryId: ID!): OfferedBids
  userEntries(email: String!): [Entry]
  portfolioSummaries(tournamentId: ID!, entryId: ID): [PortfolioSummary]
}

type Mutation {
  createEntry(input: EntryInput!): Entry
  createEntryBid(input: NewEntryBidInput!): EntryBid
  deleteEntryBid(id: ID!): Entry
  ipoPurchase(input: IPOPurchaseInput!): TournamentTeamStock!
  updateEntryCashSpent(entryId: ID!, ipoCashSpent: Float!, secondaryMarketCashSpent: Float): Entry
}
