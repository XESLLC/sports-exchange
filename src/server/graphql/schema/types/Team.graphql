type Team {
  id: ID!
  name: String
}

type TournamentTeam {
  id: ID!
  teamId: ID!
  teamName: String!
  seed: Int!
  region: String
  ipoPrice: Float!
  tournament: String!
  milestoneData: [MilestoneData]
  isEliminated: Boolean!
  numStocksInCirculation: Int
}

type MilestoneData {
  milestoneId: String
  milestoneName: String
  dividendPrice: Float
  wins: Int
  losses: Int
  ties: Int
}

input CreateTeamInput {
  name: String!
  leagueId: String!
}

input TeamLeagueInput {
  teamId: String!
  leagueId: String!
}

input TeamTournamentInput {
  teamId: String!
  tournamentId: String!
}

type Query {
  getTeamsByLeagueId(leagueId: ID!): [Team]
  tournamentTeams(tournamentId: ID!): [TournamentTeam]!
  tournamentTeamByTeamId(tournamentId: ID!, teamId: ID!): TournamentTeam!
  teams: [Team]
  team(id: ID!): Team
}

type Mutation {
  createTeam(input: CreateTeamInput!): Team!
  deleteTeam(name: String!, leagueId: ID!): String
  addTeamToTournament(input: TeamTournamentInput!): Team
}
