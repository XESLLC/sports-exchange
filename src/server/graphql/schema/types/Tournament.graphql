type Tournament {
  id: ID!
  name: String!
  leagueId: ID!
  isIpoOpen: Boolean!
  settings: LeagueSettings
  createdAt: String!
}

type TournamentWithLeagueName {
  id: ID!
  name: String!
  leagueId: ID!
  leagueName: String
  createdAt: String!
}

type TournamentTeam {
  id: ID!
  tournamentId: ID!
  teamId: ID!
  price: Float!
  seed: Int!
}

input TournamentInput {
  name: String!
  leagueId: String!
}

input UpdateTournamentInput {
  id: ID!
  name: String!
  leagueId: String!
}

input DeleteTournamentInput {
  id: ID!
}

input TournamentTeamInput {
  price: Float!
  teamId: ID!
  seed: Int!
  tournamentId: ID!
}

input TournamentTeamMilestoneInput {
  id: ID!
  milestoneInput: MilestoneDataInput
}

input MilestoneDataInput {
  milestoneId: String!
  milestoneName: String!
  dividendPrice: Float!
  wins: Int
  losses: Int
  ties: Int
}

type Query {
  getTournamentsByLeagueId(leagueId: ID!): [Tournament]
  getTournamentTransactions(tournamentId: ID!): [Transaction]
  tournaments: [TournamentWithLeagueName]
  tournament(id: ID!): Tournament
}

type Mutation {
  createOrUpdateMilestoneData(input: TournamentTeamMilestoneInput!): Team
  createTournament(input: TournamentInput!): Tournament!
  createTournamentTeam(input: TournamentTeamInput!): TournamentTeam!
  updateTournament(input: UpdateTournamentInput!): ID!
  deleteTournament(input: DeleteTournamentInput!): ID
  toggleIsIpoOpen(tournamentId: ID!, isIpoOpen: Boolean!): Tournament
  updateTournamentTeam(input: TournamentTeamInput!): TournamentTeam
  toggleTournamentTeamEliminated(tournamentTeamId: ID!, isEliminated: Boolean!): TournamentTeam
}
