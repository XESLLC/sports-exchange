---
service: serverless-react-sports-exchange
configValidationMode: off

provider:
  name: aws
  runtime: nodejs12.x
  region: ${opt:region, 'us-west-2'}
  stage: ${opt:stage, 'dev'}
  memorySize: 1024
  timeout: 6
  logRetentionInDays: 7
  lambdaHashingVersion: 20201221 # for upcoming Serverless 3.0.0
  profile: sports-exchange

  apiGateway:
    shouldStartNameWithService: true # for upcoming Serverless 3.0.0

  environment:
    SERVERLESS_PROJECT: ${self:service}
    SERVERLESS_REGION: ${self:provider.region}
    SERVERLESS_STAGE: ${self:provider.stage}

    #APP_DIST_URL: ${self:custom.distBucketUrl.${self:provider.region}, self:custom.distBucketUrl.default}
    #APP_PUBLIC_URL: ${self:custom.distBucketUrl.${self:provider.region}, self:custom.distBucketUrl.default}
    APIGATEWAY_URL:
      Fn::Join:
        - ""
        - - https://
          - Ref: ApiGatewayRestApi
          - .execute-api.
          - Ref: AWS::Region
          - .amazonaws.com/
          - ${self:provider.stage}

plugins:
  #- serverless-webpack
  - serverless-plugin-scripts
  - serverless-offline
  # - serverless-s3-deploy

functions:
  graphql:
    # Any web request regardless of path or method will be handled by a single Lambda function
    handler: src/server/app.graphqlHandler
    package:
      individually: true
      exclude:
        - "src/browser/**"
    events:
      - http:
          path: graphql
          method: get
          cors:
            allowOrigins: '*'
            enabled: true
            origin: '*'
            headers: ['*']
            allowCredentials: true
      - http:
          path: graphql
          method: post
          cors:
            allowOrigins: '*'
            enabled: true
            origin: '*'
            headers: ['*']
            allowCredentials: true

custom:
  #distBucketUrl:
  #  default:
      # All other regions
  #    Fn::Join:
  #      - ""
  #      - - https://s3-
  #        - Ref: AWS::Region
  #        - .amazonaws.com/
  #        - Ref: DistBucket
  scripts:
    hooks:
      # Build the client-side script before packaging backend code
      #package:initialize: "npm run build:browser"
      #deploy:finalize: "npm run deploy"

  #webpack:
    #webpackConfig: "webpack.browser.config.js"

resources:
  Resources:
    # Customize the API Gateway resource
    ApiGatewayRestApi:
      Type: AWS::ApiGateway::RestApi
      Properties:
        # Enable gzip compression
        MinimumCompressionSize: 1000

    # S3 Bucket for the distribution bundles
    #DistBucket:
      #Type: AWS::S3::Bucket
      #DeletionPolicy: Delete
      #Properties:
      #  AccessControl: PublicRead
      #  CorsConfiguration:
      #    CorsRules:
      #      - AllowedHeaders:
      #          - "*"
      #        AllowedMethods:
      #          - "GET"
      #        AllowedOrigins:
      #          - "*"
      #        MaxAge: 3000

  Outputs:
    ApiGatewayRestApi:
      Description: API Gateway Endpoint
      Value:
        Ref: ApiGatewayRestApi
    #DistBucket:
    #  Description: Browser Distribution S3 Bucket
    #  Value:
    #    Ref: DistBucket
